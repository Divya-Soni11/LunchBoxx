// lib/models/user_model.dart
class UserModel {
  final String uid;
  final String name;
  final String email;
  final String phone;
  final String userType; // 'customer' or 'chef'
  final String? profileImage;
  final Map<String, dynamic> preferences;
  final DateTime createdAt;

  UserModel({
    required this.uid,
    required this.name,
    required this.email,
    required this.phone,
    required this.userType,
    this.profileImage,
    this.preferences = const {},
    required this.createdAt,
  });

  Map<String, dynamic> toMap() {
    return {
      'uid': uid,
      'name': name,
      'email': email,
      'phone': phone,
      'userType': userType,
      'profileImage': profileImage,
      'preferences': preferences,
      'createdAt': createdAt.millisecondsSinceEpoch,
    };
  }

  factory UserModel.fromMap(Map<String, dynamic> map) {
    return UserModel(
      uid: map['uid'] ?? '',
      name: map['name'] ?? '',
      email: map['email'] ?? '',
      phone: map['phone'] ?? '',
      userType: map['userType'] ?? 'customer',
      profileImage: map['profileImage'],
      preferences: Map<String, dynamic>.from(map['preferences'] ?? {}),
      createdAt: DateTime.fromMillisecondsSinceEpoch(map['createdAt'] ?? 0),
    );
  }
}


// lib/models/meal_model.dart
class Meal {
  final String id;
  final String name;
  final String description;
  final double price;
  final String imageUrl;
  final bool isVeg;
  final String cuisine;
  final String spiceLevel;
  final int tiffinsTotal;
  final int tiffinsBooked;
  final String chefId;
  final String chefName;
  final double rating;
  final int ratingCount;
  final bool isAvailable;
  final DateTime date;

  Meal({
    required this.id,
    required this.name,
    required this.description,
    required this.price,
    required this.imageUrl,
    required this.isVeg,
    required this.cuisine,
    required this.spiceLevel,
    required this.tiffinsTotal,
    required this.tiffinsBooked,
    required this.chefId,
    required this.chefName,
    this.rating = 0.0,
    this.ratingCount = 0,
    this.isAvailable = true,
    required this.date,
  });

  int get tiffinsLeft => tiffinsTotal - tiffinsBooked;
  double get availabilityPercent => tiffinsTotal > 0 ? (tiffinsLeft / tiffinsTotal) * 100 : 0;

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'description': description,
      'price': price,
      'imageUrl': imageUrl,
      'isVeg': isVeg,
      'cuisine': cuisine,
      'spiceLevel': spiceLevel,
      'tiffinsTotal': tiffinsTotal,
      'tiffinsBooked': tiffinsBooked,
      'chefId': chefId,
      'chefName': chefName,
      'rating': rating,
      'ratingCount': ratingCount,
      'isAvailable': isAvailable,
      'date': date.millisecondsSinceEpoch,
    };
  }

  factory Meal.fromMap(Map<String, dynamic> map) {
    return Meal(
      id: map['id'] ?? '',
      name: map['name'] ?? '',
      description: map['description'] ?? '',
      price: (map['price'] ?? 0).toDouble(),
      imageUrl: map['imageUrl'] ?? '',
      isVeg: map['isVeg'] ?? true,
      cuisine: map['cuisine'] ?? '',
      spiceLevel: map['spiceLevel'] ?? 'medium',
      tiffinsTotal: map['tiffinsTotal'] ?? 0,
      tiffinsBooked: map['tiffinsBooked'] ?? 0,
      chefId: map['chefId'] ?? '',
      chefName: map['chefName'] ?? '',
      rating: (map['rating'] ?? 0).toDouble(),
      ratingCount: map['ratingCount'] ?? 0,
      isAvailable: map['isAvailable'] ?? true,
      date: DateTime.fromMillisecondsSinceEpoch(map['date'] ?? 0),
    );
  }
}



